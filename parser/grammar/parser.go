// Code generated by goyacc -o parser.go grammar.y. DO NOT EDIT.

//line grammar.y:2
package grammar

import __yyfmt__ "fmt"

//line grammar.y:2

import (
	"fmt"
	"github.com/WhatsApp-Platform/typegen/parser/ast"
)

//line grammar.y:10
type yySymType struct {
	yys      int
	node     ast.Node
	program  *ast.ProgramNode
	decl     ast.Declaration
	decls    []ast.Declaration
	import_  *ast.ImportNode
	imports  []*ast.ImportNode
	struct_  *ast.StructNode
	field    *ast.FieldNode
	fields   []*ast.FieldNode
	enum_    *ast.EnumNode
	variant  *ast.EnumVariantNode
	variants []*ast.EnumVariantNode
	typedef  *ast.TypeAliasNode
	const_   *ast.ConstantNode
	constval ast.ConstantValue
	type_    ast.Type
	ident    string
	str      string
	num      int64
}

const IDENTIFIER = 57346
const STRING_LITERAL = 57347
const NUMBER_LITERAL = 57348
const IMPORT = 57349
const STRUCT = 57350
const ENUM = 57351
const TYPE = 57352
const CONST = 57353
const LBRACE = 57354
const RBRACE = 57355
const LPAREN = 57356
const RPAREN = 57357
const LBRACKET = 57358
const RBRACKET = 57359
const COLON = 57360
const SEMICOLON = 57361
const COMMA = 57362
const EQUALS = 57363
const QUESTION = 57364
const DOT = 57365
const COMMENT = 57366
const INT8 = 57367
const INT16 = 57368
const INT32 = 57369
const INT64 = 57370
const INT = 57371
const BIGINT = 57372
const NAT8 = 57373
const NAT16 = 57374
const NAT32 = 57375
const NAT64 = 57376
const NAT = 57377
const BIGNAT = 57378
const FLOAT32 = 57379
const FLOAT64 = 57380
const DECIMAL = 57381
const STRING = 57382
const BOOL = 57383
const JSON = 57384
const TIME = 57385
const DATE = 57386
const DATETIME = 57387
const TIMETZ = 57388
const DATETZ = 57389
const DATETIMETZ = 57390

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING_LITERAL",
	"NUMBER_LITERAL",
	"IMPORT",
	"STRUCT",
	"ENUM",
	"TYPE",
	"CONST",
	"LBRACE",
	"RBRACE",
	"LPAREN",
	"RPAREN",
	"LBRACKET",
	"RBRACKET",
	"COLON",
	"SEMICOLON",
	"COMMA",
	"EQUALS",
	"QUESTION",
	"DOT",
	"COMMENT",
	"INT8",
	"INT16",
	"INT32",
	"INT64",
	"INT",
	"BIGINT",
	"NAT8",
	"NAT16",
	"NAT32",
	"NAT64",
	"NAT",
	"BIGNAT",
	"FLOAT32",
	"FLOAT64",
	"DECIMAL",
	"STRING",
	"BOOL",
	"JSON",
	"TIME",
	"DATE",
	"DATETIME",
	"TIMETZ",
	"DATETZ",
	"DATETIMETZ",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar.y:290

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 156

var yyAct = [...]int8{
	37, 35, 32, 75, 24, 28, 27, 74, 71, 83,
	5, 36, 69, 26, 17, 6, 11, 12, 13, 14,
	72, 65, 11, 12, 13, 14, 17, 25, 68, 67,
	81, 33, 36, 40, 70, 29, 73, 23, 22, 79,
	21, 77, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 20, 19, 38,
	3, 4, 78, 15, 16, 80, 66, 82, 40, 76,
	84, 10, 9, 34, 85, 8, 31, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 30, 7, 39, 18, 2, 1, 0, 0,
	0, 0, 0, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64,
}

var yyPact = [...]int16{
	8, -1000, 8, 14, -1000, -1000, 64, -1000, -1000, -1000,
	-1000, 63, 36, 34, 33, 14, -1000, -1000, -19, -1000,
	15, 1, -15, -16, 31, 27, 28, 107, 23, -1000,
	-1, 27, -1000, -10, 7, -1000, -11, -1000, -1000, -20,
	62, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 17, -1000, -1000, 107, 26, 107, -8, -1000, 107,
	-1000, -1000, -1000, 107, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 117, 116, 71, 115, 114, 70, 10, 113, 112,
	86, 2, 85, 83, 1, 82, 81, 76, 0, 69,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 4, 4, 6, 6,
	7, 7, 7, 7, 8, 9, 9, 10, 10, 11,
	11, 12, 13, 13, 14, 14, 15, 16, 17, 17,
	18, 18, 18, 18, 5, 5, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
}

var yyR2 = [...]int8{
	0, 2, 1, 1, 2, 2, 1, 3, 1, 2,
	1, 1, 1, 1, 5, 0, 1, 1, 2, 3,
	4, 5, 1, 2, 1, 3, 4, 4, 1, 1,
	1, 1, 3, 4, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -6, -3, -7, 7, -8, -12, -15,
	-16, 8, 9, 10, 11, -6, -3, -7, -4, 4,
	4, 4, 4, 4, 23, 12, 12, 21, 21, 4,
	-9, -10, -11, 4, -13, -14, 4, -18, -19, -5,
	16, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 4, -17, 6, 5, 13,
	-11, 18, 13, -14, 18, 23, 17, -18, -18, 22,
	-18, 4, -18, 17, -18, -18,
}

var yyDef = [...]int8{
	0, -2, 0, 2, 3, 8, 0, 10, 11, 12,
	13, 0, 0, 0, 0, 1, 4, 9, 5, 6,
	0, 0, 0, 0, 0, 15, 0, 0, 0, 7,
	0, 16, 17, 0, 0, 22, 24, 26, 30, 31,
	0, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 34, 27, 28, 29, 14,
	18, 0, 21, 23, 0, 0, 0, 0, 19, 0,
	25, 35, 32, 0, 20, 33,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:70
		{
			yyVAL.program = &ast.ProgramNode{
				Imports:      yyDollar[1].imports,
				Declarations: yyDollar[2].decls,
			}
			yylex.(*Lexer).result = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:77
		{
			yyVAL.program = &ast.ProgramNode{
				Imports:      nil,
				Declarations: yyDollar[1].decls,
			}
			yylex.(*Lexer).result = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:86
		{
			yyVAL.imports = []*ast.ImportNode{yyDollar[1].import_}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:89
		{
			yyVAL.imports = append(yyDollar[1].imports, yyDollar[2].import_)
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:94
		{
			yyVAL.import_ = &ast.ImportNode{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Path:     yyDollar[2].str,
			}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:102
		{
			yyVAL.str = yyDollar[1].ident
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:105
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].ident
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:110
		{
			yyVAL.decls = []ast.Declaration{yyDollar[1].decl}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:113
		{
			yyVAL.decls = append(yyDollar[1].decls, yyDollar[2].decl)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:118
		{
			yyVAL.decl = yyDollar[1].struct_
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:119
		{
			yyVAL.decl = yyDollar[1].enum_
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:120
		{
			yyVAL.decl = yyDollar[1].typedef
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:121
		{
			yyVAL.decl = yyDollar[1].const_
		}
	case 14:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:124
		{
			yyVAL.struct_ = &ast.StructNode{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Name:     yyDollar[2].ident,
				Fields:   yyDollar[4].fields,
			}
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:133
		{
			yyVAL.fields = nil
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:136
		{
			yyVAL.fields = yyDollar[1].fields
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:141
		{
			yyVAL.fields = []*ast.FieldNode{yyDollar[1].field}
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:144
		{
			yyVAL.fields = append(yyDollar[1].fields, yyDollar[2].field)
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:149
		{
			yyVAL.field = &ast.FieldNode{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Name:     yyDollar[1].ident,
				Type:     yyDollar[3].type_,
				Optional: false,
			}
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:157
		{
			yyVAL.field = &ast.FieldNode{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Name:     yyDollar[1].ident,
				Type:     yyDollar[4].type_,
				Optional: true,
			}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:167
		{
			yyVAL.enum_ = &ast.EnumNode{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Name:     yyDollar[2].ident,
				Variants: yyDollar[4].variants,
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:176
		{
			yyVAL.variants = []*ast.EnumVariantNode{yyDollar[1].variant}
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:179
		{
			yyVAL.variants = append(yyDollar[1].variants, yyDollar[2].variant)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:184
		{
			yyVAL.variant = &ast.EnumVariantNode{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Name:     yyDollar[1].ident,
				Payload:  nil,
			}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:191
		{
			yyVAL.variant = &ast.EnumVariantNode{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Name:     yyDollar[1].ident,
				Payload:  yyDollar[3].type_,
			}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:200
		{
			yyVAL.typedef = &ast.TypeAliasNode{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Name:     yyDollar[2].ident,
				Type:     yyDollar[4].type_,
			}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:209
		{
			if !IsConstantCase(yyDollar[2].ident) {
				yylex.(*Lexer).Error(fmt.Sprintf("constant name '%s' must be in CONSTANT_CASE format", yyDollar[2].ident))
				return 1
			}
			yyVAL.const_ = &ast.ConstantNode{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Name:     yyDollar[2].ident,
				Value:    yyDollar[4].constval,
			}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:222
		{
			yyVAL.constval = &ast.IntConstant{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Value:    yyDollar[1].num,
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:228
		{
			yyVAL.constval = &ast.StringConstant{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Value:    yyDollar[1].str,
			}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:236
		{
			yyVAL.type_ = yyDollar[1].type_
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:237
		{
			yyVAL.type_ = &ast.NamedType{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				Name:     yyDollar[1].str,
			}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:243
		{
			yyVAL.type_ = &ast.ArrayType{
				BaseNode:    ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				ElementType: yyDollar[3].type_,
			}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:249
		{
			yyVAL.type_ = &ast.MapType{
				BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}},
				KeyType:  yyDollar[2].type_, ValueType: yyDollar[4].type_,
			}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:257
		{
			yyVAL.str = yyDollar[1].ident
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:260
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].ident
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:265
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "int8"}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:266
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "int16"}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:267
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "int32"}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:268
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "int64"}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:269
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "int"}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:270
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "bigint"}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:271
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "nat8"}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:272
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "nat16"}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:273
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "nat32"}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:274
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "nat64"}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:275
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "nat"}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:276
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "bignat"}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:277
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "float32"}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:278
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "float64"}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:279
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "decimal"}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:280
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "string"}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:281
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "bool"}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:282
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "json"}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:283
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "time"}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:284
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "date"}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:285
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "datetime"}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:286
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "timetz"}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:287
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "datetz"}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:288
		{
			yyVAL.type_ = &ast.PrimitiveType{BaseNode: ast.BaseNode{Position: ast.Position{Filename: yylex.(*Lexer).filename, Line: yylex.(*Lexer).scanner.Line, Column: yylex.(*Lexer).scanner.Column}}, Name: "datetimetz"}
		}
	}
	goto yystack /* stack new state and value */
}
